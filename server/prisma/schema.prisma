generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum Role {
  DOCTOR
  ADMIN
  RECEPTIONIST
  PHARMACIST
  OTHER
}

enum Sex {
  m
  f
  o
}

model Auth {
  id           Int            @id @default(sequence())
  email        String         @unique
  role         Role           @default(OTHER)
  password     String
  Pharmacist   Pharmacist[]
  Receptionist Receptionist[]
  Doctor       Doctor[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
}

model Doctor {
  id           Int            @id @default(sequence())
  name         String
  age          Int
  availability String         @default("Yes")
  designation  String
  contact      String         @unique
  address      String
  appointments Appointment[]
  // Prescription Prescription[]
  authId       Int
  auth         Auth           @relation(fields: [authId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
}

model Pharmacist {
  id        Int      @id @default(sequence())
  name      String
  email     String   @unique
  contact   String   @unique
  address   String
  authId    Int
  auth      Auth     @relation(fields: [authId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Receptionist {
  id        Int      @id @default(sequence())
  name      String
  email     String   @unique
  contact   String   @unique
  address   String
  authId    Int
  auth      Auth     @relation(fields: [authId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Patient {
  id           Int            @id @default(sequence())
  name         String
  age          Int
  sex          Sex
  lastVisit    DateTime?
  contact      String         @unique
  address      String?
  email        String?
  jamiaId      String?
  Appointment  Appointment[]
  // Prescription Prescription[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
}

model Appointment {
  id           Int            @id @default(sequence())
  date         DateTime       @default(now())
  Prescription Prescription[]
  patientId    Int
  patient      Patient        @relation(fields: [patientId], references: [id])
  doctorId     Int
  doctor       Doctor         @relation(fields: [doctorId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
}

model Prescription {
  id              Int                  @id @default(sequence())
  symptoms        String
  diagnosis       String? // prescription
  CustomMedicines String
  datePrescribed  DateTime             @default(now())
  appointmentId   Int
  appointment     Appointment          @relation(fields: [appointmentId], references: [id])
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now())
  medicines       PrescribedMedicine[]
}

model PrescribedMedicine {
  id             Int           @id @default(sequence())
  quantity       Int
  dosage         String?
  description    String
  MedicineId     Int
  Medicine       Inventory     @relation(fields: [MedicineId], references: [id])
  Prescription   Prescription? @relation(fields: [prescriptionId], references: [id])
  prescriptionId Int?
}

model Inventory {
  id                 Int                  @id @default(sequence())
  name               String
  quantity           Int
  price              Decimal
  description        String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  PrescribedMedicine PrescribedMedicine[]
}
